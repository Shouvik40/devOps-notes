pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/yourusername/your-repo.git' // Update with your repository
        IMAGE_NAME = 'your-image-name' // Docker image name
        AWS_REGION = 'your-aws-region' // AWS region
        ECR_REPO = 'your-ecr-repo' // ECR repository name (if using ECR)
        EKS_CLUSTER = 'your-eks-cluster' // EKS cluster name
        HELM_CHART_PATH = 'path/to/your/helm/chart' // Path to Helm chart
        SONARQUBE_SERVER = 'http://your-sonarqube-server' // SonarQube server URL
        SONARQUBE_CREDENTIALS = 'sonarqube-credentials-id' // Jenkins credentials ID for SonarQube
        MAVEN_CREDENTIALS = 'maven-credentials-id' // Jenkins credentials ID for Maven (if needed)
        DOCKER_CREDENTIALS = 'docker-credentials-id' // Jenkins credentials ID for Docker
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${GIT_REPO}"
            }
        }

        stage('Maven Build') {
            steps {
                script {
                    // Run Maven build
                    sh 'mvn clean package'
                }
            }
        }

        stage('Run JUnit Tests') {
            steps {
                script {
                    // Run JUnit tests
                    sh 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // SonarQube analysis
                    withCredentials([usernamePassword(credentialsId: "${SONARQUBE_CREDENTIALS}", usernameVariable: 'SONAR_USER', passwordVariable: 'SONAR_PASSWORD')]) {
                        sh """
                        sonar-scanner \
                          -Dsonar.projectKey=${IMAGE_NAME} \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=${SONARQUBE_SERVER} \
                          -Dsonar.login=${SONAR_USER} \
                          -Dsonar.password=${SONAR_PASSWORD}
                        """
                    }
                }
            }
        }

        stage('Dockerize and Push Image') {
            steps {
                script {
                    // Log in to Docker
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS}") {
                        // Build and push the Docker image
                        def app = docker.build("${IMAGE_NAME}:${env.BUILD_ID}")
                        app.push()
                    }

                    // Optionally, push to ECR
                    sh """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                    docker tag ${IMAGE_NAME}:${env.BUILD_ID} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${env.BUILD_ID}
                    docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${env.BUILD_ID}
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                script {
                    // Configure kubectl for EKS
                    sh "aws eks update-kubeconfig --name ${EKS_CLUSTER} --region ${AWS_REGION}"

                    // Deploy using Helm
                    sh """
                    helm upgrade --install ${EKS_CLUSTER} ${HELM_CHART_PATH} \
                      --set image.repository=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO} \
                      --set image.tag=${env.BUILD_ID}
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
